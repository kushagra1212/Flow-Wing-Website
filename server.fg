bring "Vortex-module.fg"
bring File
bring Err
bring Json
bring Map
bring Vec
bring Str
bring "SystemProcess-module.fg"
bring {ANSI_RED} from "colors.fg"
var errorObject: Vortex::HttpResponseType = {
  content_type: "text/html",
  body: `
    <html>
      <body>
        <h1>Error Loading Page</h1>
      </body>
    </html>
  `,
  status: 500
}
var errorObjectPlain: Vortex::HttpResponseType = {
  content_type: "text/plain",
  body: ANSI_RED + "Internal Server Error",
  status: 500
}

fun wrap(pageHtml: str, showOpenPlayground: bool = true) -> str {
  const headerHtml: str, headerLoadErr: Err::Result = File::read("pages/components/header.html", "r")
  const footerHtml: str, footerLoadErr: Err::Result = File::read("pages/components/footer.html", "r")
  const headHtml: str, headLoadErr: Err::Result = File::read("pages/components/head.html", "r")
  var openPlayground: str, openPlaygroundLoadErr: Err::Result = File::read("pages/components/openPlayground.html", "r")
  if !showOpenPlayground {
    openPlayground = "" 
  }
  return `
    <html>
      ` + headHtml + `
      <body>
        ` + headerHtml + `
        ` + pageHtml + `
        ` + footerHtml + `
        ` + openPlayground + `
      </body>
    </html>
  `
}


fun handleHomePage(req: Vortex::HttpRequest, res: Vortex::HttpResponse) -> nthg {
  const homePage: str, homePageLoadErr: Err::Result = File::read("pages/homePage.html", "r")
  /; Handle GET request for the home page

  const downloadSection: str, downloadSectionLoadErr: Err::Result = File::read("pages/components/downloadSection.html", "r")
  var variables: Vec::String = new Vec::String()
  variables.add("download-section" + Vortex::DELIMITER + downloadSection)
  var err: Err::Result = res.send({
    status: 200,
    content_type: "text/html",
    body: Vortex::renderTemplate(wrap(homePage), variables)
  })
  variables.free()
  if err != Nir {
    print("Error sending response: ", err.getMessage(), "\n")
  }
}


fun handleDownloadPage(req: Vortex::HttpRequest, res: Vortex::HttpResponse) -> nthg {
  const downloadSection: str, downloadSectionLoadErr: Err::Result = File::read("pages/components/downloadSection.html", "r")
  var downloadSectionSpec: str
  if Str::subStrIndex(req.endpoint, "/mac-arm64") != -1 {
    const downloadArm64: str, downloadArm64Err: Err::Result = File::read("pages/download-arm64.html", "r")
    downloadSectionSpec = downloadArm64 
  } or if Str::subStrIndex(req.endpoint, "/windows-x86_64") != -1 {
    const downloadWin86_64: str, downloadWin86_64Err: Err::Result = File::read("pages/download-windows-x86_64.html", "r")
    downloadSectionSpec = downloadWin86_64 
  } or if Str::subStrIndex(req.endpoint, "/linux-x86_64") != -1 {
    const downloadLinux86_64: str, downloadLinux86_64Err: Err::Result = File::read("pages/download-linux-x86_64.html", "r")
    downloadSectionSpec = downloadLinux86_64 
  } else {
    var err: Err::Result = res.send({
      status: 200,
      content_type: "text/html",
      body: wrap(`<center>` + downloadSection + `</center>`)
    })
    return :
  }
  var err: Err::Result = res.send({
    status: 200,
    content_type: "text/html",
    body: wrap(downloadSectionSpec)
  })
}


fun handleFlowWingCodeEditor(req: Vortex::HttpRequest, res: Vortex::HttpResponse) -> nthg {
  const flowWingCodeEditor: str, flowWingCodeEditorLoadErr: Err::Result = File::read("pages/flow-wing-code-editor.html", "r")
  var err: Err::Result = res.send({
    status: 200,
    content_type: "text/html",
    body: wrap(flowWingCodeEditor, false)
  })
}


fun getCodeAndInput(inout body: str, inout len: int) -> str, str {
  var codeData: str = ""
  var inputData: str = ""
  var inputStartIndex: int = Str::subStrIndex(body, "$input_flowwing$") - 3
  var readingCode: bool = true
  var j: int = 9
  print("inputStartIndex: ", inputStartIndex, "\n")
  while j < len - 2 {
    if (j == inputStartIndex) {
      j = j + Str::length("$input_flowwing$") + 6        /; ","
 
      readingCode = false 
      continue
    }
    /;! //n for newline 
      /;! ///n for newline inside string

    if (Str::int8ToString(body[j]) == "\\" && Str::int8ToString(body[j + 1]) == "n") {
      if (readingCode) {
        codeData = codeData + "\n" 
      } else {
        inputData = inputData + "\n" 
      }
      j = j + 2 
    } or if (Str::int8ToString(body[j]) == "\\" && Str::int8ToString(body[j + 1]) == "\\" && Str::int8ToString(body[j + 2]) == "n") {
      if (readingCode) {
        codeData = codeData + "\\n" 
      } else {
        inputData = inputData + "\\n" 
      }
      j = j + 3 
    } or if (Str::int8ToString(body[j]) == "\\" && Str::int8ToString(body[j + 1]) == "\\" && Str::int8ToString(body[j + 2]) == "\\" && Str::int8ToString(body[j + 3]) == "\"") {
      if (readingCode) {
        codeData = codeData + "\\\"" 
      } else {
        inputData = inputData + "\\\"" 
      }
      j = j + 4 
    } or if (Str::int8ToString(body[j]) == "\\" && Str::int8ToString(body[j + 1]) == "\\" && Str::int8ToString(body[j + 2]) == "t") {
      if (readingCode) {
        codeData = codeData + "\\t" 
      } else {
        inputData = inputData + "\\t" 
      }
      j = j + 3 
    } or if (Str::int8ToString(body[j]) == "\\" && Str::int8ToString(body[j + 1]) == "\\" && Str::int8ToString(body[j + 2]) == "r") {
      if (readingCode) {
        codeData = codeData + "\\r" 
      } else {
        inputData = inputData + "\\r" 
      }
      j = j + 3 
    } or if (Str::int8ToString(body[j]) == "\\" && Str::int8ToString(body[j + 1]) == "\\" && Str::int8ToString(body[j + 2]) == "\\") {
      if (readingCode) {
        codeData = codeData + "\\\\\\" 
      } else {
        inputData = inputData + "\\\\\\" 
      }
      j = j + 3 
    } or if (Str::int8ToString(body[j]) == "\\" && Str::int8ToString(body[j + 1]) == "\\" && Str::int8ToString(body[j + 2]) == "'") {
      if (readingCode) {
        codeData = codeData + "\\'" 
      } else {
        inputData = inputData + "\\'" 
      }
      j = j + 3 
    } or if (Str::int8ToString(body[j]) == "\\" && Str::int8ToString(body[j + 1]) == "\"") {
      if (readingCode) {
        codeData = codeData + "\"" 
      } else {
        inputData = inputData + "\"" 
      }
      j = j + 2 
    } or if (Str::int8ToString(body[j]) == "\\" && Str::int8ToString(body[j + 1]) == "n") {
      if (readingCode) {
        codeData = codeData + "\n" 
      } else {
        inputData = inputData + "\n" 
      }
      j = j + 2 
    } or if (Str::int8ToString(body[j]) == "\\" && Str::int8ToString(body[j + 1]) == "t") {
      if (readingCode) {
        codeData = codeData + "\t" 
      } else {
        inputData = inputData + "\t" 
      }
      j = j + 2 
    } or if (Str::int8ToString(body[j]) == "\\" && Str::int8ToString(body[j + 1]) == "r") {
      if (readingCode) {
        codeData = codeData + "\r" 
      } else {
        inputData = inputData + "\r" 
      }
      j = j + 2 
    } else {
      if (readingCode) {
        codeData = codeData + Str::int8ToString(body[j]) 
      } else {
        inputData = inputData + Str::int8ToString(body[j]) 
      }
      j = j + 1 
    }
  }
  return codeData + "\n", inputData
}


fun codeSubmit(req: Vortex::HttpRequest, res: Vortex::HttpResponse) -> nthg {
  var codeData: str, inputData: str = getCodeAndInput(req.body, req.headers.content_length)
  if (!codeData) {
    var err: Err::Result = res.send({
      status: 203,
      content_type: "text/plain",
      body: "[No Output]"
    })
    return :
  }
  {
    var result: str, errorExecution: Err::Result = SystemProcess::runCMD("rm -rf build/bin/code")
    var result2: str, errorExecution2: Err::Result = SystemProcess::runCMD("rm -rf code.fg")
  }
  const fileName: str = "4a7d1ed414474e4033ac29ccb8653"
  var errorWritingToFile: Err::Result = File::write(fileName + ".fg", codeData, "wb")
  if (errorWritingToFile != Nir) {
    var err: Err::Result = res.send(errorObjectPlain)
    return :
  }
  var result: str, errorExecution: Err::Result = "",Nir
  result, errorExecution = SystemProcess::runCMD("FlowWing " + fileName + ".fg") 
  if (errorExecution != Nir) {
    var err: Err::Result = res.send(errorObjectPlain)
    return :
  }
  const NO_OUTPUT: str = "[No Output]"
  var errorText: str = ""
  if (Str::subStrIndex(result, "File: " + fileName + ".fg [Error]") != -1) {
    var err: Err::Result = res.send({
      status: 203,
      content_type: "text/plain",
      body: ((result != Nir && result != "") ? result : NO_OUTPUT)
    })
    return :
  }
  if (result != "" && result != "\n") {
    var err: Err::Result = res.send({
      status: 203,
      content_type: "text/plain",
      body: ANSI_RED + ((result != Nir && result != "") ? result : NO_OUTPUT)
    })
    return :
  }
  result, errorExecution = SystemProcess::runCMD("build/bin/" + fileName, inputData) 
  if (errorExecution) {
    if (errorExecution.message == "Command execution timed out") {
      result = "Command execution timed out: TLE" 
    } else {
      result = ANSI_RED + "Command execution failed: " + errorExecution.message 
    }
  }
  var err: Err::Result = res.send({
    status: 200,
    content_type: "text/plain",
    body: ((result != Nir && result != "") ? result : NO_OUTPUT)
  })
}

const port: int = 8080
print("Flow-Wing server starting on port: ", port, "\n")
var server: Vortex::Server = new Vortex::Server(port)
server.setRoute("GET", "/", handleHomePage)
server.setRoute("GET", "/downloads/*", handleDownloadPage)
server.setRoute("GET", "/flow-wing-code-editor", handleFlowWingCodeEditor)
server.setRoute("POST", "/code/submit", codeSubmit)
server.start()
